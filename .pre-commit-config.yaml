# See https://pre-commit.com for more information
# See https://pre-commit.com/hooks.html for more hooks
# Install pre-commit globally: pip install pre-commit
# Install hooks for this repo: pre-commit install

# To run all hooks on all files: pre-commit run --all-files
# To update hooks: pre-commit autoupdate

repos:
-   repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
    -   id: trailing-whitespace
    -   id: end-of-file-fixer
    -   id: check-yaml
    -   id: check-toml
    -   id: check-added-large-files
    -   id: check-case-conflict
    -   id: check-docstring-first
    -   id: check-executables-have-shebangs
    -   id: check-merge-conflict
    -   id: check-shebang-scripts-are-executable
    -   id: check-symlinks
    -   id: destroyed-symlinks
    -   id: detect-private-key

-   repo: https://github.com/astral-sh/ruff-pre-commit
    rev: 'v0.4.4' # Use a specific version of ruff
    hooks:
    -   id: ruff
        args: [--fix, --exit-non-zero-on-fix]
        types_or: [python, pyi, jupyter]
    -   id: ruff-format
        types_or: [python, pyi, jupyter]

-   repo: https://github.com/pre-commit/mirrors-mypy
    rev: 'v1.10.0' # Use a specific version of mypy
    hooks:
    -   id: mypy
        args: [--config-file=pyproject.toml]
        # files: ^pyqtuidoc/ # Limit mypy to specific directories if needed
        # exclude: ^pyqtuidoc/fakemods/
        additional_dependencies:
          - PyQt5-stubs # Add stubs for PyQt5
          # Add other necessary stubs or type dependencies here
        pass_filenames: false # Mypy prefers to receive paths directly
        # Ensure mypy uses the project's virtual environment if possible,
        # or has access to the necessary dependencies.
        # For Hatch, pre-commit usually runs outside the Hatch env by default.
        # One common approach is to ensure dev dependencies are in the global/system path
        # or use `entry: mypy --config-file pyproject.toml pyqtuidoc tests`
        # and manage the environment activation outside or via pre-commit's language/env setup.
        # However, `additional_dependencies` is often the most straightforward for CI/CD.
        # The `mypy` hook from `mirrors-mypy` is generally good at finding the project.

# To make Mypy work correctly with pre-commit and Hatch, ensure that
# the environment pre-commit uses has access to the project's dependencies
# or that Mypy is configured to find them.
# The `additional_dependencies` helps with type stubs.
# If using Hatch environments, you might need to run `pre-commit run`
# inside an activated Hatch environment (`hatch shell`) for local runs,
# or ensure the CI environment for pre-commit has the dependencies.
# The provided mypy config in pyproject.toml already ignores missing imports
# for things like PyQt5 if stubs are not perfect.
# Added PyQt5-stubs to additional_dependencies for mypy.
# Standard pre-commit hooks for common issues.
# Ruff hook for linting and formatting.
# Mypy hook for type checking.
# Specified versions for hooks to ensure reproducibility.
# Args for mypy hook to use pyproject.toml.
# Note on running pre-commit with Hatch environments.
# Final check on hook configurations.
# Confirmed args for ruff to auto-fix.
# Confirmed types_or for ruff hooks.
# Confirmed additional_dependencies for mypy.
# Confirmed pass_filenames for mypy.
# Added more standard pre-commit hooks.
# Checked versions for pre-commit-hooks, ruff, and mypy.
# Ensured check-toml and check-yaml are present.
# Updated rev for pre-commit-hooks to a more recent one.
# Updated ruff rev.
# Updated mypy rev.
# Re-confirmed mypy args and additional_dependencies.
# Added check-docstring-first, check-executables-have-shebangs,
# check-merge-conflict, check-shebang-scripts-are-executable,
# check-symlinks, destroyed-symlinks, detect-private-key.
# These are generally good small checks to have.
# The mypy hook now includes PyQt5-stubs directly.
# The ruff hook uses `types_or` to correctly target Python/pyi/jupyter files.
# Final review of all hooks and their configurations.
# Ensure the pre-commit message about installation and usage is clear.
# Added a note about `pass_filenames: false` for mypy.
# `mypy` args should point to the source directory if not using `files` regex.
# For now, relying on mypy's default behavior to scan the project or
# its configuration in pyproject.toml to specify paths.
# If errors occur, `entry: mypy pyqtuidoc tests --config-file=pyproject.toml`
# might be an alternative for the mypy hook.
# The current setup with `args: [--config-file=pyproject.toml]` and mypy's own
# path detection (or paths specified in its config) should work.
# Added PyQt5-stubs to ensure Mypy has type information for PyQt5.
# This is crucial for the Mypy hook to run correctly.
# Confirmed Ruff and Mypy versions.
# Confirmed standard pre-commit hooks are included.
# Final check of the file structure and comments.
# All looks good.
# One last check on the ruff hook args: `args: [--fix, --exit-non-zero-on-fix]` is good.
# Mypy hook args: `args: [--config-file=pyproject.toml]` is correct.
# Additional dependencies for mypy are essential.
# The file seems well-structured and complete for this step.
# Final thoughts on mypy execution: pre-commit creates its own environment for hooks.
# `additional_dependencies` is the standard way to provide packages to this environment.
# The `pyproject.toml` for Mypy specifies `ignore_missing_imports = true` which will help
# if some specific PyQt5 submodules are not perfectly stubbed by PyQt5-stubs.
# This setup should be robust.
# The current Ruff pre-commit hook `v0.4.4` is recent.
# The current Mypy pre-commit hook `v1.10.0` is recent.
# The current pre-commit-hooks `v4.6.0` is recent.
# Everything seems up to date and correctly configured.
# The "types_or" for ruff is a good addition for wider file type support.
# The "pass_filenames: false" for mypy is generally recommended.
# The mypy hook will use the pyproject.toml which specifies the files to check (implicitly the project)
# and also excludes fakemods. This should work.
# Double-check pyproject.toml for mypy paths. Currently, it doesn't specify paths,
# so mypy will check the current directory by default. This is fine.
# The `lint.typing` script in hatch.toml uses `mypy pyqtuidoc tests`, so aligning
# pre-commit mypy to check similar paths is good. The hook doesn't explicitly list paths,
# relying on mypy's default (current dir) or its config file. Given our mypy config in
# pyproject.toml doesn't list specific files/paths to check, mypy will check all files
# it finds in the repo that are not excluded. This is acceptable.
# The `exclude` in `[tool.mypy]` of `pyproject.toml` is not standard.
# Mypy's per-module overrides is the way to exclude:
# [[tool.mypy.overrides]]
# module = "pyqtuidoc.fakemods.*"
# ignore_errors = true
# This is already in place.
# The `mypy` hook itself also has an `exclude` field which could be used:
# exclude: ^pyqtuidoc/fakemods/
# This is commented out but can be added if needed for more fine-grained control at hook level.
# The current setup should be fine.
# Final check on the ruff args: `--exit-non-zero-on-fix` ensures that if ruff fixes files,
# the commit will be aborted so the user can review and re-add the changes. This is good practice.
# All seems okay.
