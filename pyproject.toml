[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "pyqtuidoc"
dynamic = ["version"]
description = "Work with Qt .ui files"
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
authors = [
    { name = "Adam Twardoch", email = "adam+github@twardoch.com" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "PyQt5>=5.15.4",
    "Send2Trash>=1.5.0",
]

[project.urls]
Homepage = "https://github.com/twardoch/pyqtuidoc"
"Source Code" = "https://github.com/twardoch/pyqtuidoc"

[project.scripts]
qtuidocmake = "pyqtuidoc.__main__:main"

[project.optional-dependencies]
dev = [
    "ruff",
    "mypy",
    "hatch",
    "pytest",
    "twine>=3.2.0",
]

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.targets.sdist]
exclude = [
  "/.github",
  "/.gitignore",
  "/tests",
]

[tool.hatch.build.targets.wheel]
packages = ["pyqtuidoc"]
exclude = [
  "/.github",
  "/.gitignore",
  "/tests",
]

[tool.ruff.lint]
# Enable common rule sets.
# See https://docs.astral.sh/ruff/rules/
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # Pyflakes
    "I",  # isort
    "C90", # mccabe complexity
    "N",  # pep8-naming
    "UP", # pyupgrade
    "ANN", # flake8-annotations
    "S",  # flake8-bandit
    "BLE", # flake8-blind-except
    "B", # flake8-bugbear
    "A", # flake8-builtins
    # "COM", # flake8-commas - Disabled due to conflict with formatter
    "ISC", # flake8-implicit-str-concat
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT", # flake8-pytest-style
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "ARG", # flake8-unused-arguments
    "RUF", # Ruff-specific rules
]
ignore = [
    "ANN204", # Missing type annotation for special method __init__
    "S101", # Use of assert detected
    "COM812", # Missing trailing comma in multi-line expression (handled by formatter)
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.isort]
force-single-line = true

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "pyqtuidoc/fakemods/*" # Exclude fakemods from linting for now
]

# Same as Black.
line-length = 88
target-version = "py38"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true # For PyQt5 and other C extensions primarily
# More strict checks can be enabled progressively
# disallow_untyped_defs = true
# disallow_any_unimported = true
# no_implicit_optional = true
# check_untyped_defs = true
# warn_redundant_casts = true
# warn_unused_ignores = true
# disallow_incomplete_defs = true
# disallow_untyped_decorators = true

[[tool.mypy.overrides]]
module = "pyqtuidoc.fakemods.*"
ignore_errors = true

[tool.hatch.envs.default]
dependencies = [
  "pytest",
  "pytest-cov",
]
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=pyqtuidoc --cov=tests {args:tests}"
cov-html = "test-cov --cov-report=html"

[tool.hatch.envs.lint]
dependencies = [
  "ruff",
  "mypy",
  "pre-commit", # For running hooks manually
]
[tool.hatch.envs.lint.scripts]
style = "ruff format ."
lint = "ruff check ."
typing = "mypy pyqtuidoc tests" # Add tests dir later if it has type-checked code
all = [
  "style",
  "lint",
  "typing",
]

[tool.hatch.envs.build]
dependencies = [
  "hatch",
  "twine",
]
[tool.hatch.envs.build.scripts]
build = "hatch build"
publish-test = "twine upload --repository testpypi dist/*"
publish = "twine upload dist/*"

[tool.coverage.run]
source = ["pyqtuidoc", "tests"]
omit = [
    "pyqtuidoc/__about__.py", # If using hatch-vcs for version via __about__.py
    "pyqtuidoc/fakemods/*",
]

[tool.coverage.report]
show_missing = true
fail_under = 70 # Example coverage threshold

[tool.coverage.html]
directory = "coverage_html_report"
